[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "translation",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "LanguageForm",
        "importPath": "chat_app.forms",
        "description": "chat_app.forms",
        "isExtraImport": true,
        "detail": "chat_app.forms",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "require_http_methods",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "Chatapi_Call",
        "importPath": "common.chatapi_call",
        "description": "common.chatapi_call",
        "isExtraImport": true,
        "detail": "common.chatapi_call",
        "documentation": {}
    },
    {
        "label": "Chatapi_Call",
        "importPath": "common.chatapi_call",
        "description": "common.chatapi_call",
        "isExtraImport": true,
        "detail": "common.chatapi_call",
        "documentation": {}
    },
    {
        "label": "Chatapi_Call_first",
        "importPath": "common.chatapi_call_first",
        "description": "common.chatapi_call_first",
        "isExtraImport": true,
        "detail": "common.chatapi_call_first",
        "documentation": {}
    },
    {
        "label": "Translator_ja",
        "importPath": "common.translator_ja",
        "description": "common.translator_ja",
        "isExtraImport": true,
        "detail": "common.translator_ja",
        "documentation": {}
    },
    {
        "label": "Translator_en",
        "importPath": "common.translator_en",
        "description": "common.translator_en",
        "isExtraImport": true,
        "detail": "common.translator_en",
        "documentation": {}
    },
    {
        "label": "Translator_en",
        "importPath": "common.translator_en",
        "description": "common.translator_en",
        "isExtraImport": true,
        "detail": "common.translator_en",
        "documentation": {}
    },
    {
        "label": "Translator_en",
        "importPath": "common.translator_en",
        "description": "common.translator_en",
        "isExtraImport": true,
        "detail": "common.translator_en",
        "documentation": {}
    },
    {
        "label": "activate",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "faiss",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "faiss",
        "description": "faiss",
        "detail": "faiss",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEBase",
        "importPath": "email.mime.base",
        "description": "email.mime.base",
        "isExtraImport": true,
        "detail": "email.mime.base",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "encoders",
        "importPath": "email",
        "description": "email",
        "isExtraImport": true,
        "detail": "email",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "django_on_heroku",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_on_heroku",
        "description": "django_on_heroku",
        "detail": "django_on_heroku",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "set_language",
        "importPath": "django.views.i18n",
        "description": "django.views.i18n",
        "isExtraImport": true,
        "detail": "django.views.i18n",
        "documentation": {}
    },
    {
        "label": "chat_first_view",
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "isExtraImport": true,
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "RedirectView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "staticfiles_storage",
        "importPath": "django.contrib.staticfiles.storage",
        "description": "django.contrib.staticfiles.storage",
        "isExtraImport": true,
        "detail": "django.contrib.staticfiles.storage",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "ChatAppConfig",
        "kind": 6,
        "importPath": "chat_app.apps",
        "description": "chat_app.apps",
        "peekOfCode": "class ChatAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chat_app'",
        "detail": "chat_app.apps",
        "documentation": {}
    },
    {
        "label": "LanguageForm",
        "kind": 6,
        "importPath": "chat_app.forms",
        "description": "chat_app.forms",
        "peekOfCode": "class LanguageForm(forms.Form):\n    language = forms.ChoiceField(choices=settings.LANGUAGES, required=True)",
        "detail": "chat_app.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "chat_app.urls",
        "description": "chat_app.urls",
        "peekOfCode": "urlpatterns = [\n    path('set_language/', views.set_language, name='set_language'),      # 言語設定用のビュー\n    path('ask_first/', views.ask_first, name='ask_first'),               # 初回の質問用のビュー\n    path('chat_first/', views.chat_first_view, name='chat_first_view'),  # 初回チャットビュー\n    path('ask/', views.ask, name='ask'),                                 # 通常の質問用のビュー\n    path('chat/', views.chat_view, name='chat_view'),                    # 通常チャットビュー\n    path('clear_history/', views.clear_history, name='clear_history'),   # 履歴クリア\n    path('end_chatbot/', views.end_chatbot, name='end_chatbot'),         # チャットボット終了\n    # 以下は、chat_first.htmlからリダイレクトされた処理を受けるためのビュー\n    path('submit_winchange_responses/', views.submit_winchange_responses, name='submit_winchange_responses'), ",
        "detail": "chat_app.urls",
        "documentation": {}
    },
    {
        "label": "ask_first",
        "kind": 2,
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "peekOfCode": "def ask_first(request):\n    print('@@@@@ views.py : def ask_first @@@@@')\n    authenticate_and_get_openai_key(request)\n    openai.api_key = request.session[\"openai_api_key\"]\n    user_message = request.POST.get('message') \n    # translatorクラスを使用してuser_messageを日本語に翻訳\n    translator_ja = Translator_ja(openai.api_key)\n    user_message = translator_ja.translate_to_japanese(user_message)\n    application_id = \"django_chatapp1\"\n    # parquet_path(全学習データ)とfaiss_path(全学習データ要約分）を",
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "ask",
        "kind": 2,
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "peekOfCode": "def ask(request):\n    print('@@@@@ views.py : def ask @@@@@')\n    authenticate_and_get_openai_key(request)\n    openai.api_key = request.session[\"openai_api_key\"]\n    user_message = request.POST.get('message')\n    # translatorクラスを使用してuser_messageを日本語に翻訳\n    translator_ja = Translator_ja(openai.api_key)    \n    user_message = translator_ja.translate_to_japanese(user_message)\n    application_id = \"django_chatapp2\"\n    # セッションに 'select_index' が存在する（聞きたいことが指定された）場合",
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "submit_winchange_responses",
        "kind": 2,
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "peekOfCode": "def submit_winchange_responses(request):\n    try:\n        print('@@@@@ views.py : def submit_winchang_responses @@@@@')\n        data = json.loads(request.body)\n        index = data.get('index')\n        # 選択されたインデックスとテキストに基づいて必要な処理を行う\n        print(f\"選択されたインデックス: {index}\")\n        # 応答を返す\n        return JsonResponse({'status': 'success', 'message': '選択された回答が正常に処理されました。'})\n    except Exception as e:",
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "submit_faisssearch_responses",
        "kind": 2,
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "peekOfCode": "def submit_faisssearch_responses(request):\n    try:\n        print('@@@@@ views.py : def submit_faisssearch_responses @@@@@')\n        data = json.loads(request.body)\n        index = data.get('index')\n        text = data.get('text') \n        # 選択されたインデックスとテキストに基づいて必要な処理を行う\n        print(f\"選択されたインデックス: {index}, テキスト: {text}\")  \n        # Faiss検索用インデックスをセッションに保存\n        request.session['faiss_index_no'] = index  ",
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "submit_selected_responses",
        "kind": 2,
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "peekOfCode": "def submit_selected_responses(request):\n    try:\n        print('@@@@@ views.py : def submit_selected_responses @@@@@')\n        data = json.loads(request.body)\n        index = data.get('index')\n        text = data.get('text')   \n        # 選択されたインデックスとテキストに基づいて必要な処理を行う\n        print(f\"選択されたインデックス: {index}, テキスト: {text}\")\n        # 聞きたい事インデックスをセッションに保存\n        request.session['select_index'] = index  ",
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "chat_first_view",
        "kind": 2,
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "peekOfCode": "def chat_first_view(request):\n    print('@@@@@ views.py : def chat_first_view @@@@@')\n    # セッションの言語設定\n    user_language = request.session.get('_language', settings.LANGUAGE_CODE)\n    activate(user_language)\n    # 画面と連動する言語設定\n    request.LANGUAGE_CODE = user_language  \n    # print('@@@@@ views.py : def chat_first_view @@@@@ session_language : ', request.session.get('_language', '未設定'))\n    print('@@@@@ views.py : def chat_first_view @@@@@ html_language    : ', request.LANGUAGE_CODE)\n    if user_language == 'ja':",
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "chat_view",
        "kind": 2,
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "peekOfCode": "def chat_view(request):\n    print('@@@@@ views.py : def chat_view @@@@@')\n    return render(request, 'chat.html')\ndef set_language(request):\n    print('@@@@@ views.py : def set_language @@@@@')\n    if request.method == 'POST':\n        form = LanguageForm(request.POST)\n        if form.is_valid():\n            user_language = form.cleaned_data['language']\n            translation.activate(user_language)",
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "set_language",
        "kind": 2,
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "peekOfCode": "def set_language(request):\n    print('@@@@@ views.py : def set_language @@@@@')\n    if request.method == 'POST':\n        form = LanguageForm(request.POST)\n        if form.is_valid():\n            user_language = form.cleaned_data['language']\n            translation.activate(user_language)\n            request.session['_language'] = user_language\n            print(f'言語設定: {user_language}')\n            print(f'セッション言語: {request.session.get(\"_language\")}')",
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "clear_history",
        "kind": 2,
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "peekOfCode": "def clear_history(request):\n    print('@@@@@ views.py : def clear_history @@@@@')\n    if 'openai_api_key' in request.session:\n        del request.session['openai_api_key']\n    if 'past' in request.session:\n        del request.session['past']\n    if 'generated' in request.session:\n        del request.session['generated']\n    if 'show_history_limit_message' in request.session:\n        del request.session['show_history_limit_message']",
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "authenticate_and_get_openai_key",
        "kind": 2,
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "peekOfCode": "def authenticate_and_get_openai_key(request):\n    print('@@@@@ views.py : def authenticate_and_get_openai_key @@@@@')\n    if 'openai_api_key' not in request.session:\n        # 環境変数の読み込み\n        load_dotenv()\n            # 実行環境の判断\n        is_aws = os.getenv('AWS_ENV') == 'production'\n        # 認証キーの取得\n        if is_aws:\n            # AWS環境の場合",
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "end_chatbot",
        "kind": 2,
        "importPath": "chat_app.views",
        "description": "chat_app.views",
        "peekOfCode": "def end_chatbot(request):\n    print('@@@@@ views.py : def end_chatbot @@@@@')\n    # セッションをクリアする\n    clear_history(request)\n    request.session.flush()\n    # メール送信処理を呼び出す\n    Chatapi_Call.send_email_with_attachment()\n    # chatbot終了後にリロードした時に前の画面を表示させないための対応\n    request.session['clear_process'] =  'clear_process'\n    # CSVファイルの内容をクリアする",
        "detail": "chat_app.views",
        "documentation": {}
    },
    {
        "label": "Chatapi_Call",
        "kind": 6,
        "importPath": "common.chatapi_call",
        "description": "common.chatapi_call",
        "peekOfCode": "class Chatapi_Call:\n    def __init__(self, request, user_message, application_id, api_key, parquet_path, faiss_path):\n        print('@@@@@ common/chatapi_call.py : def __init__  @@@@@')   \n        self.request = request  # Djangoのrequestオブジェクト\n        self.user_message = user_message\n        self.application_id = application_id\n        self.api_key = api_key\n        self.parquet_path = parquet_path\n        self.faiss_path = faiss_path\n        self.parquet_df = self.load_parquet_file()",
        "detail": "common.chatapi_call",
        "documentation": {}
    },
    {
        "label": "Chatapi_Call_first",
        "kind": 6,
        "importPath": "common.chatapi_call_first",
        "description": "common.chatapi_call_first",
        "peekOfCode": "class Chatapi_Call_first(Chatapi_Call):\n    def __init__(self, request, user_message, application_id, api_key, parquet_path, faiss_path):\n        print('@@@@@ common/chatapi_call_first.py : def __init__  @@@@@')   \n        super().__init__(request, user_message, application_id, api_key, parquet_path, faiss_path)\n    # オーバーライドメソッド\n    def call_openai_chat_completion(self):\n        print('@@@@@ common/chatapi_call_first.py : def call_openai_chat_completion  @@@@@')\n        # OpenAI APIキーの設定\n        openai.api_key = self.api_key\n        # USERMSGと類似性検索でヒットしたデータのindex-noから",
        "detail": "common.chatapi_call_first",
        "documentation": {}
    },
    {
        "label": "Translator_en",
        "kind": 6,
        "importPath": "common.translator_en",
        "description": "common.translator_en",
        "peekOfCode": "class Translator_en:\n    def __init__(self, api_key):\n        print('@@@@@ common/translator_en.py : def __init__  @@@@@')  \n        self.api_key = api_key\n    def translate_to_english(self, text):\n        openai.api_key = self.api_key\n        # 英語に翻訳するプロンプト\n        translate_prompt = [\n            {\"role\": \"system\", \"content\": \"You are a translation assistant.\"},\n            {\"role\": \"user\", \"content\": f\"Translate the following text to English:\\n\\n{text}\"}",
        "detail": "common.translator_en",
        "documentation": {}
    },
    {
        "label": "Translator_ja",
        "kind": 6,
        "importPath": "common.translator_ja",
        "description": "common.translator_ja",
        "peekOfCode": "class Translator_ja:\n    def __init__(self, api_key):\n        print('@@@@@ common/translator_ja.py : def __init__  @@@@@')  \n        self.api_key = api_key\n    def translate_to_japanese(self, text):\n        print('@@@@@ common/translator_ja.py : translate_to_japanese  @@@@@')  \n        openai.api_key = self.api_key\n        # 言語を判定するプロンプト\n        detect_prompt = [\n            {\"role\": \"system\", \"content\": \"You are a language detection assistant.\"},",
        "detail": "common.translator_ja",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "django_chatbot.asgi",
        "description": "django_chatbot.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "django_chatbot.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# MEDIA_ROOT と MEDIA_URL の設定\nMEDIA_ROOT = BASE_DIR / 'media'\nMEDIA_URL = '/media/'\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-joxqtmil(o$(+bm15t1vnro9td3wgbig0^+!1ms68aq$scprqn'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'media'\nMEDIA_URL = '/media/'\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-joxqtmil(o$(+bm15t1vnro9td3wgbig0^+!1ms68aq$scprqn'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# ALLOWED_HOSTS = []\nALLOWED_HOSTS = ['*']    # ngrok,herokuの設定　",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-joxqtmil(o$(+bm15t1vnro9td3wgbig0^+!1ms68aq$scprqn'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# ALLOWED_HOSTS = []\nALLOWED_HOSTS = ['*']    # ngrok,herokuの設定　\n# CSRF_TRUSTED_ORIGINS = ['https://*.ngrok-free.app']  # ngrokの固有設定",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-joxqtmil(o$(+bm15t1vnro9td3wgbig0^+!1ms68aq$scprqn'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# ALLOWED_HOSTS = []\nALLOWED_HOSTS = ['*']    # ngrok,herokuの設定　\n# CSRF_TRUSTED_ORIGINS = ['https://*.ngrok-free.app']  # ngrokの固有設定\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "DEBUG = True\n# ALLOWED_HOSTS = []\nALLOWED_HOSTS = ['*']    # ngrok,herokuの設定　\n# CSRF_TRUSTED_ORIGINS = ['https://*.ngrok-free.app']  # ngrokの固有設定\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']    # ngrok,herokuの設定　\n# CSRF_TRUSTED_ORIGINS = ['https://*.ngrok-free.app']  # ngrokの固有設定\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chat_app',",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chat_app',\n]\nMIDDLEWARE = [",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "LOCALE_PATHS",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "LOCALE_PATHS = (\n    os.path.join(BASE_DIR, 'locale'),\n)\nROOT_URLCONF = 'django_chatbot.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "ROOT_URLCONF = 'django_chatbot.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "WSGI_APPLICATION = 'django_chatbot.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "LANGUAGE_CODE = 'ja'\nTIME_ZONE = 'Asia/Tokyo'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# 使用する言語\nLANGUAGES = [\n    ('en', 'English'),\n    ('ja', 'Japanese'),\n]",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "TIME_ZONE = 'Asia/Tokyo'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# 使用する言語\nLANGUAGES = [\n    ('en', 'English'),\n    ('ja', 'Japanese'),\n]\n# Static files (CSS, JavaScript, Images)",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# 使用する言語\nLANGUAGES = [\n    ('en', 'English'),\n    ('ja', 'Japanese'),\n]\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# 使用する言語\nLANGUAGES = [\n    ('en', 'English'),\n    ('ja', 'Japanese'),\n]\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# STATIC_URL = '/static/'",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "USE_TZ = True\n# 使用する言語\nLANGUAGES = [\n    ('en', 'English'),\n    ('ja', 'Japanese'),\n]\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# STATIC_URL = '/static/'\n# STATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\"),]",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGES",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "LANGUAGES = [\n    ('en', 'English'),\n    ('ja', 'Japanese'),\n]\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# STATIC_URL = '/static/'\n# STATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\"),]\nSTATIC_URL = 'static/'                   # heroku 固有の設定\nSTATIC_DIR = BASE_DIR / \"static\"         # heroku 固有の設定",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "STATIC_URL = 'static/'                   # heroku 固有の設定\nSTATIC_DIR = BASE_DIR / \"static\"         # heroku 固有の設定\nSTATICFILES_DIRS = [STATIC_DIR,]\n# 画像ファイルが保存されているディレクトリへのパスを追加\nIMAGE_FILE_PATH = os.path.join(BASE_DIR, 'common', 'imagefile')\ndjango_on_heroku.settings(locals())      # heroku 固有の設定\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# common/dataディレクトリ内のファイルへのパス",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_DIR",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "STATIC_DIR = BASE_DIR / \"static\"         # heroku 固有の設定\nSTATICFILES_DIRS = [STATIC_DIR,]\n# 画像ファイルが保存されているディレクトリへのパスを追加\nIMAGE_FILE_PATH = os.path.join(BASE_DIR, 'common', 'imagefile')\ndjango_on_heroku.settings(locals())      # heroku 固有の設定\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# common/dataディレクトリ内のファイルへのパス\nPARQUET_FILE_PATH = os.path.join(BASE_DIR, 'common', 'data', 'output_data_all.parquet')",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "STATICFILES_DIRS = [STATIC_DIR,]\n# 画像ファイルが保存されているディレクトリへのパスを追加\nIMAGE_FILE_PATH = os.path.join(BASE_DIR, 'common', 'imagefile')\ndjango_on_heroku.settings(locals())      # heroku 固有の設定\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# common/dataディレクトリ内のファイルへのパス\nPARQUET_FILE_PATH = os.path.join(BASE_DIR, 'common', 'data', 'output_data_all.parquet')\nFAISS_INDEX_PATH = os.path.join(BASE_DIR, 'common', 'data', 'faiss_index_all.idx')",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "IMAGE_FILE_PATH",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "IMAGE_FILE_PATH = os.path.join(BASE_DIR, 'common', 'imagefile')\ndjango_on_heroku.settings(locals())      # heroku 固有の設定\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# common/dataディレクトリ内のファイルへのパス\nPARQUET_FILE_PATH = os.path.join(BASE_DIR, 'common', 'data', 'output_data_all.parquet')\nFAISS_INDEX_PATH = os.path.join(BASE_DIR, 'common', 'data', 'faiss_index_all.idx')\nFAISS_INDEX_SUMMARY_PATH = os.path.join(BASE_DIR, 'common', 'data', 'faiss_index_all_summary.idx')\n# Heroku 固有設定",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# common/dataディレクトリ内のファイルへのパス\nPARQUET_FILE_PATH = os.path.join(BASE_DIR, 'common', 'data', 'output_data_all.parquet')\nFAISS_INDEX_PATH = os.path.join(BASE_DIR, 'common', 'data', 'faiss_index_all.idx')\nFAISS_INDEX_SUMMARY_PATH = os.path.join(BASE_DIR, 'common', 'data', 'faiss_index_all_summary.idx')\n# Heroku 固有設定\n# Herokuのファイルシステムは一時的であり、アプリケーションの再起動やデプロイのたびにリセットされるため、\n# ファイルにログを保存するのは適していません。具体的には、以下の点が問題となります。\n# 1. 一時的なファイルシステム: Herokuでは、ファイルシステムが一時的であり、アプリケーションの再起動やデプロイのたびにリセット\n# 　　されるため、ファイルにログを保存するのは適していません。具体的には、以下の点が問題となります：",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "PARQUET_FILE_PATH",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "PARQUET_FILE_PATH = os.path.join(BASE_DIR, 'common', 'data', 'output_data_all.parquet')\nFAISS_INDEX_PATH = os.path.join(BASE_DIR, 'common', 'data', 'faiss_index_all.idx')\nFAISS_INDEX_SUMMARY_PATH = os.path.join(BASE_DIR, 'common', 'data', 'faiss_index_all_summary.idx')\n# Heroku 固有設定\n# Herokuのファイルシステムは一時的であり、アプリケーションの再起動やデプロイのたびにリセットされるため、\n# ファイルにログを保存するのは適していません。具体的には、以下の点が問題となります。\n# 1. 一時的なファイルシステム: Herokuでは、ファイルシステムが一時的であり、アプリケーションの再起動やデプロイのたびにリセット\n# 　　されるため、ファイルにログを保存するのは適していません。具体的には、以下の点が問題となります：\n# 2. ログの保存場所: Herokuでは、ログは標準出力（コンソール）に出力するのが一般的です。\n# 　　これにより、Herokuのログ機能を通じてログを確認できます。",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "FAISS_INDEX_PATH",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "FAISS_INDEX_PATH = os.path.join(BASE_DIR, 'common', 'data', 'faiss_index_all.idx')\nFAISS_INDEX_SUMMARY_PATH = os.path.join(BASE_DIR, 'common', 'data', 'faiss_index_all_summary.idx')\n# Heroku 固有設定\n# Herokuのファイルシステムは一時的であり、アプリケーションの再起動やデプロイのたびにリセットされるため、\n# ファイルにログを保存するのは適していません。具体的には、以下の点が問題となります。\n# 1. 一時的なファイルシステム: Herokuでは、ファイルシステムが一時的であり、アプリケーションの再起動やデプロイのたびにリセット\n# 　　されるため、ファイルにログを保存するのは適していません。具体的には、以下の点が問題となります：\n# 2. ログの保存場所: Herokuでは、ログは標準出力（コンソール）に出力するのが一般的です。\n# 　　これにより、Herokuのログ機能を通じてログを確認できます。\n# 上記の理由から、Herokuではファイルにログを保存するのではなく、標準出力（コンソール）に出力するように設定します。",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "FAISS_INDEX_SUMMARY_PATH",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "FAISS_INDEX_SUMMARY_PATH = os.path.join(BASE_DIR, 'common', 'data', 'faiss_index_all_summary.idx')\n# Heroku 固有設定\n# Herokuのファイルシステムは一時的であり、アプリケーションの再起動やデプロイのたびにリセットされるため、\n# ファイルにログを保存するのは適していません。具体的には、以下の点が問題となります。\n# 1. 一時的なファイルシステム: Herokuでは、ファイルシステムが一時的であり、アプリケーションの再起動やデプロイのたびにリセット\n# 　　されるため、ファイルにログを保存するのは適していません。具体的には、以下の点が問題となります：\n# 2. ログの保存場所: Herokuでは、ログは標準出力（コンソール）に出力するのが一般的です。\n# 　　これにより、Herokuのログ機能を通じてログを確認できます。\n# 上記の理由から、Herokuではファイルにログを保存するのではなく、標準出力（コンソール）に出力するように設定します。\n#  ",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "django_chatbot.settings",
        "description": "django_chatbot.settings",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    # ロガーの設定\n    'loggers': {\n        # Djangoが利用するロガー\n        'django': {\n            'handlers': ['console'], \n            'level': 'INFO',\n        },",
        "detail": "django_chatbot.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "django_chatbot.urls",
        "description": "django_chatbot.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('set_language/', set_language, name='set_language'),\n    path('chat_app/', include('chat_app.urls')),       # chat_appのurls.pyを参照\n    path('', chat_first_view, name='home'),            # ルートURLでchat_first_viewを呼び出す\n    path('favicon.ico', RedirectView.as_view(url=staticfiles_storage.url('icon/favicon.ico')), name='favicon'),\n]\n# 画像ファイルへのアクセスを設定\nurlpatterns += static('/chat_app/chat/common/imagefile/', document_root=settings.IMAGE_FILE_PATH)\n# メディアファイルへのアクセスを設定",
        "detail": "django_chatbot.urls",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "django_chatbot.wsgi",
        "description": "django_chatbot.wsgi",
        "peekOfCode": "logger = logging.getLogger('django')\n# アプリケーション起動時にINFOレベルのログを出力\nlogger.info('<<<<<< iFUSION-Chatbot start >>>>>>')\napplication = get_wsgi_application()",
        "detail": "django_chatbot.wsgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "django_chatbot.wsgi",
        "description": "django_chatbot.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "django_chatbot.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_chatbot.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]